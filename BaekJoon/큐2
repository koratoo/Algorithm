import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.StringTokenizer;

public class Main {

    static Deque<Integer> q = new ArrayDeque<>();
    static StringBuilder sb = new StringBuilder();
    
    public static void main(String[] args) throws IOException {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int N = Integer.parseInt(br.readLine());
        
        for(int i = 0 ; i < N ; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            
            String str = st.nextToken();
            
            if(st.hasMoreTokens())
                push(Integer.parseInt(st.nextToken()));
            else if(str.equals("pop")) {
                sb.append(pop()).append("\n");
            }else if(str.equals("size")) {
                sb.append(size()).append("\n");
            }else if(str.equals("empty")) {
                sb.append(empty()).append("\n");
            }else if(str.equals("front")) {
                sb.append(front()).append("\n");
            }else if(str.equals("back")) {
                sb.append(back()).append("\n");
            }
        }
        
        bw.write(sb.toString());
        bw.flush();
        bw.close();
        br.close();
    }
    
    public static void push(int i) {
        q.add(i);
    }
    
    public static int pop() {
        if(q.isEmpty()) 
            return -1;

        return q.poll();
    }
    
    public static int size() {
        return q.size();
    }
    
    public static int empty() {
        if(q.isEmpty()) 
            return 1;
        
        return 0;
    }
    
    public static int front() {
        if(q.isEmpty()) 
            return -1;
        
        return q.peek();
    }
    
    public static int back() {
        if(q.isEmpty()) 
            return -1;
        
        return q.peekLast();
    }
    
}
