package BeakJoon;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

public class _7576_토마토 {

	static int[] dx = {1, 0, -1, 0};
	static int[] dy = {0, 1,  0,-1};
	static int[][] graph;
	static int M,N;
	static int count;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		M = sc.nextInt();
		N = sc.nextInt();
		
		graph = new int[N][M];
		
		List<node> start = new ArrayList<>();
		
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				graph[i][j] = sc.nextInt();
				if(graph[i][j]==1) {
					start.add(new node(i,j));
				}
			}
		}
		
		for(int i=0;i<start.size();i++) {
			bfs(start.get(i).x,start.get(i).y);
		}
		
		 if (checkAllTomatoes()) {
	            System.out.println(count - 1); // 처음에 1부터 시작하므로 1을 빼줌
	        } else {
	            System.out.println(-1);
	        }
		
	}
	
	static class node {
		int x;
		int y;
		node(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
	
	public static void bfs(int x, int y) {
		Queue<node> queue = new LinkedList<>();
		queue.offer(new node(x,y));
		
		while(!queue.isEmpty()) {
			System.out.println("들어옴" + queue.size());
			queue.poll();
			for(int i=0;i<4;i++) {
				int nx = dx[i] +x;
				int ny = dy[i] +y;
				if(nx >= 0 && ny >= 0 && nx < N && ny < M && graph[nx][ny] != 1 && graph[nx][ny] != -1) {
					graph[nx][ny] = 1;
					
					bfs(nx,ny);
				}
			}
			
			if(!checkAllTomatoes()) {
				break;
			}else {
				count++;
			}
		}		
		
		
	}
	
	 public static boolean checkAllTomatoes() {
	        for (int i = 0; i < N; i++) {
	            for (int j = 0; j < M; j++) {
	                if (graph[i][j] == 0) {
	                    return false; // 0이 존재하면 false 반환
	                }
	            }
	        }
	        return true; // 0이 없으면 true 반환
	    }
}
