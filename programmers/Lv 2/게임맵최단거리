import java.util.*;
class Solution {
    
    int[] dx = {1,0,-1,0};
    int[] dy = {0,-1,0,1};
    boolean visited[][];
    int N,M;
    public int solution(int[][] maps) {
        N = maps.length;
        M = maps[0].length;
        visited = new boolean[N][M];
        
        return bfs(maps);
    }
    
    public int bfs(int[][] maps){
        int dist=0;
        Queue<Point> queue = new LinkedList<>();
        visited[0][0] = true;
        queue.add(new Point(0,0,0));
        while(!queue.isEmpty()){
            Point p = queue.poll();
            int x = p.x;
            int y = p.y;
            dist = p.dist;
            if(x==N-1 && y==M-1){
                return dist+1;
            }
            for(int i=0;i<4;i++){
                
                int nx = x+dx[i];
                int ny = y+dy[i];
                if(nx<0 || ny<0 || nx>=N || ny>=M) continue;
                if(visited[nx][ny]==true || maps[nx][ny]==0)continue;
                visited[nx][ny] = true;
                queue.offer(new Point(nx,ny,dist+1));
                
            }
        }
        return -1;
    }
    
}

class Point{
    int x;
    int y;
    int dist;
    Point(int x, int y, int dist){
        this.x = x;
        this.y = y;
        this.dist = dist;
    }
}
